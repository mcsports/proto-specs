// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mcsports/queue/v1/interaction.proto

package queuev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/mcsports/queue/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueueInteractionName is the fully-qualified name of the QueueInteraction service.
	QueueInteractionName = "mcsports.queue.v1.QueueInteraction"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueueInteractionEnqueueProcedure is the fully-qualified name of the QueueInteraction's Enqueue
	// RPC.
	QueueInteractionEnqueueProcedure = "/mcsports.queue.v1.QueueInteraction/Enqueue"
	// QueueInteractionDequeueProcedure is the fully-qualified name of the QueueInteraction's Dequeue
	// RPC.
	QueueInteractionDequeueProcedure = "/mcsports.queue.v1.QueueInteraction/Dequeue"
)

// QueueInteractionClient is a client for the mcsports.queue.v1.QueueInteraction service.
type QueueInteractionClient interface {
	Enqueue(context.Context, *connect.Request[v1.EnqueueRequest]) (*connect.Response[v1.EnqueueResponse], error)
	Dequeue(context.Context, *connect.Request[v1.DequeueRequest]) (*connect.Response[v1.DequeueResponse], error)
}

// NewQueueInteractionClient constructs a client for the mcsports.queue.v1.QueueInteraction service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueueInteractionClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueueInteractionClient {
	baseURL = strings.TrimRight(baseURL, "/")
	queueInteractionMethods := v1.File_mcsports_queue_v1_interaction_proto.Services().ByName("QueueInteraction").Methods()
	return &queueInteractionClient{
		enqueue: connect.NewClient[v1.EnqueueRequest, v1.EnqueueResponse](
			httpClient,
			baseURL+QueueInteractionEnqueueProcedure,
			connect.WithSchema(queueInteractionMethods.ByName("Enqueue")),
			connect.WithClientOptions(opts...),
		),
		dequeue: connect.NewClient[v1.DequeueRequest, v1.DequeueResponse](
			httpClient,
			baseURL+QueueInteractionDequeueProcedure,
			connect.WithSchema(queueInteractionMethods.ByName("Dequeue")),
			connect.WithClientOptions(opts...),
		),
	}
}

// queueInteractionClient implements QueueInteractionClient.
type queueInteractionClient struct {
	enqueue *connect.Client[v1.EnqueueRequest, v1.EnqueueResponse]
	dequeue *connect.Client[v1.DequeueRequest, v1.DequeueResponse]
}

// Enqueue calls mcsports.queue.v1.QueueInteraction.Enqueue.
func (c *queueInteractionClient) Enqueue(ctx context.Context, req *connect.Request[v1.EnqueueRequest]) (*connect.Response[v1.EnqueueResponse], error) {
	return c.enqueue.CallUnary(ctx, req)
}

// Dequeue calls mcsports.queue.v1.QueueInteraction.Dequeue.
func (c *queueInteractionClient) Dequeue(ctx context.Context, req *connect.Request[v1.DequeueRequest]) (*connect.Response[v1.DequeueResponse], error) {
	return c.dequeue.CallUnary(ctx, req)
}

// QueueInteractionHandler is an implementation of the mcsports.queue.v1.QueueInteraction service.
type QueueInteractionHandler interface {
	Enqueue(context.Context, *connect.Request[v1.EnqueueRequest]) (*connect.Response[v1.EnqueueResponse], error)
	Dequeue(context.Context, *connect.Request[v1.DequeueRequest]) (*connect.Response[v1.DequeueResponse], error)
}

// NewQueueInteractionHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueueInteractionHandler(svc QueueInteractionHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queueInteractionMethods := v1.File_mcsports_queue_v1_interaction_proto.Services().ByName("QueueInteraction").Methods()
	queueInteractionEnqueueHandler := connect.NewUnaryHandler(
		QueueInteractionEnqueueProcedure,
		svc.Enqueue,
		connect.WithSchema(queueInteractionMethods.ByName("Enqueue")),
		connect.WithHandlerOptions(opts...),
	)
	queueInteractionDequeueHandler := connect.NewUnaryHandler(
		QueueInteractionDequeueProcedure,
		svc.Dequeue,
		connect.WithSchema(queueInteractionMethods.ByName("Dequeue")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mcsports.queue.v1.QueueInteraction/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueueInteractionEnqueueProcedure:
			queueInteractionEnqueueHandler.ServeHTTP(w, r)
		case QueueInteractionDequeueProcedure:
			queueInteractionDequeueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueueInteractionHandler returns CodeUnimplemented from all methods.
type UnimplementedQueueInteractionHandler struct{}

func (UnimplementedQueueInteractionHandler) Enqueue(context.Context, *connect.Request[v1.EnqueueRequest]) (*connect.Response[v1.EnqueueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.queue.v1.QueueInteraction.Enqueue is not implemented"))
}

func (UnimplementedQueueInteractionHandler) Dequeue(context.Context, *connect.Request[v1.DequeueRequest]) (*connect.Response[v1.DequeueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.queue.v1.QueueInteraction.Dequeue is not implemented"))
}
