// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mcsports/friend/v1/data.proto

package friendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/mcsports/friend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FriendDataName is the fully-qualified name of the FriendData service.
	FriendDataName = "mcsports.friend.v1.FriendData"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FriendDataListInvitesProcedure is the fully-qualified name of the FriendData's ListInvites RPC.
	FriendDataListInvitesProcedure = "/mcsports.friend.v1.FriendData/ListInvites"
	// FriendDataListFriendsProcedure is the fully-qualified name of the FriendData's ListFriends RPC.
	FriendDataListFriendsProcedure = "/mcsports.friend.v1.FriendData/ListFriends"
)

// FriendDataClient is a client for the mcsports.friend.v1.FriendData service.
type FriendDataClient interface {
	ListInvites(context.Context, *connect.Request[v1.ListFriendInvitesRequest]) (*connect.Response[v1.ListFriendInvitesResponse], error)
	ListFriends(context.Context, *connect.Request[v1.ListFriendsRequest]) (*connect.Response[v1.ListFriendsResponse], error)
}

// NewFriendDataClient constructs a client for the mcsports.friend.v1.FriendData service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFriendDataClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FriendDataClient {
	baseURL = strings.TrimRight(baseURL, "/")
	friendDataMethods := v1.File_mcsports_friend_v1_data_proto.Services().ByName("FriendData").Methods()
	return &friendDataClient{
		listInvites: connect.NewClient[v1.ListFriendInvitesRequest, v1.ListFriendInvitesResponse](
			httpClient,
			baseURL+FriendDataListInvitesProcedure,
			connect.WithSchema(friendDataMethods.ByName("ListInvites")),
			connect.WithClientOptions(opts...),
		),
		listFriends: connect.NewClient[v1.ListFriendsRequest, v1.ListFriendsResponse](
			httpClient,
			baseURL+FriendDataListFriendsProcedure,
			connect.WithSchema(friendDataMethods.ByName("ListFriends")),
			connect.WithClientOptions(opts...),
		),
	}
}

// friendDataClient implements FriendDataClient.
type friendDataClient struct {
	listInvites *connect.Client[v1.ListFriendInvitesRequest, v1.ListFriendInvitesResponse]
	listFriends *connect.Client[v1.ListFriendsRequest, v1.ListFriendsResponse]
}

// ListInvites calls mcsports.friend.v1.FriendData.ListInvites.
func (c *friendDataClient) ListInvites(ctx context.Context, req *connect.Request[v1.ListFriendInvitesRequest]) (*connect.Response[v1.ListFriendInvitesResponse], error) {
	return c.listInvites.CallUnary(ctx, req)
}

// ListFriends calls mcsports.friend.v1.FriendData.ListFriends.
func (c *friendDataClient) ListFriends(ctx context.Context, req *connect.Request[v1.ListFriendsRequest]) (*connect.Response[v1.ListFriendsResponse], error) {
	return c.listFriends.CallUnary(ctx, req)
}

// FriendDataHandler is an implementation of the mcsports.friend.v1.FriendData service.
type FriendDataHandler interface {
	ListInvites(context.Context, *connect.Request[v1.ListFriendInvitesRequest]) (*connect.Response[v1.ListFriendInvitesResponse], error)
	ListFriends(context.Context, *connect.Request[v1.ListFriendsRequest]) (*connect.Response[v1.ListFriendsResponse], error)
}

// NewFriendDataHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFriendDataHandler(svc FriendDataHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	friendDataMethods := v1.File_mcsports_friend_v1_data_proto.Services().ByName("FriendData").Methods()
	friendDataListInvitesHandler := connect.NewUnaryHandler(
		FriendDataListInvitesProcedure,
		svc.ListInvites,
		connect.WithSchema(friendDataMethods.ByName("ListInvites")),
		connect.WithHandlerOptions(opts...),
	)
	friendDataListFriendsHandler := connect.NewUnaryHandler(
		FriendDataListFriendsProcedure,
		svc.ListFriends,
		connect.WithSchema(friendDataMethods.ByName("ListFriends")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mcsports.friend.v1.FriendData/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FriendDataListInvitesProcedure:
			friendDataListInvitesHandler.ServeHTTP(w, r)
		case FriendDataListFriendsProcedure:
			friendDataListFriendsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFriendDataHandler returns CodeUnimplemented from all methods.
type UnimplementedFriendDataHandler struct{}

func (UnimplementedFriendDataHandler) ListInvites(context.Context, *connect.Request[v1.ListFriendInvitesRequest]) (*connect.Response[v1.ListFriendInvitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendData.ListInvites is not implemented"))
}

func (UnimplementedFriendDataHandler) ListFriends(context.Context, *connect.Request[v1.ListFriendsRequest]) (*connect.Response[v1.ListFriendsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendData.ListFriends is not implemented"))
}
