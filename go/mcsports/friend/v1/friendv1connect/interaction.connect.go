// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mcsports/friend/v1/interaction.proto

package friendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/mcsports/friend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FriendInteractionName is the fully-qualified name of the FriendInteraction service.
	FriendInteractionName = "mcsports.friend.v1.FriendInteraction"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FriendInteractionInviteFriendProcedure is the fully-qualified name of the FriendInteraction's
	// InviteFriend RPC.
	FriendInteractionInviteFriendProcedure = "/mcsports.friend.v1.FriendInteraction/InviteFriend"
	// FriendInteractionApproveFriendProcedure is the fully-qualified name of the FriendInteraction's
	// ApproveFriend RPC.
	FriendInteractionApproveFriendProcedure = "/mcsports.friend.v1.FriendInteraction/ApproveFriend"
	// FriendInteractionRejectFriendProcedure is the fully-qualified name of the FriendInteraction's
	// RejectFriend RPC.
	FriendInteractionRejectFriendProcedure = "/mcsports.friend.v1.FriendInteraction/RejectFriend"
	// FriendInteractionRemoveFriendProcedure is the fully-qualified name of the FriendInteraction's
	// RemoveFriend RPC.
	FriendInteractionRemoveFriendProcedure = "/mcsports.friend.v1.FriendInteraction/RemoveFriend"
	// FriendInteractionSendMessageProcedure is the fully-qualified name of the FriendInteraction's
	// SendMessage RPC.
	FriendInteractionSendMessageProcedure = "/mcsports.friend.v1.FriendInteraction/SendMessage"
	// FriendInteractionReplyProcedure is the fully-qualified name of the FriendInteraction's Reply RPC.
	FriendInteractionReplyProcedure = "/mcsports.friend.v1.FriendInteraction/Reply"
	// FriendInteractionJumpProcedure is the fully-qualified name of the FriendInteraction's Jump RPC.
	FriendInteractionJumpProcedure = "/mcsports.friend.v1.FriendInteraction/Jump"
)

// FriendInteractionClient is a client for the mcsports.friend.v1.FriendInteraction service.
type FriendInteractionClient interface {
	InviteFriend(context.Context, *connect.Request[v1.InviteFriendRequest]) (*connect.Response[v1.InviteFriendResponse], error)
	ApproveFriend(context.Context, *connect.Request[v1.ApproveFriendRequest]) (*connect.Response[v1.ApproveFriendResponse], error)
	RejectFriend(context.Context, *connect.Request[v1.RejectFriendRequest]) (*connect.Response[v1.RejectFriendResponse], error)
	RemoveFriend(context.Context, *connect.Request[v1.RemoveFriendRequest]) (*connect.Response[v1.RemoveFriendResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	Reply(context.Context, *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error)
	Jump(context.Context, *connect.Request[v1.JumpRequest]) (*connect.Response[v1.JumpResponse], error)
}

// NewFriendInteractionClient constructs a client for the mcsports.friend.v1.FriendInteraction
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFriendInteractionClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FriendInteractionClient {
	baseURL = strings.TrimRight(baseURL, "/")
	friendInteractionMethods := v1.File_mcsports_friend_v1_interaction_proto.Services().ByName("FriendInteraction").Methods()
	return &friendInteractionClient{
		inviteFriend: connect.NewClient[v1.InviteFriendRequest, v1.InviteFriendResponse](
			httpClient,
			baseURL+FriendInteractionInviteFriendProcedure,
			connect.WithSchema(friendInteractionMethods.ByName("InviteFriend")),
			connect.WithClientOptions(opts...),
		),
		approveFriend: connect.NewClient[v1.ApproveFriendRequest, v1.ApproveFriendResponse](
			httpClient,
			baseURL+FriendInteractionApproveFriendProcedure,
			connect.WithSchema(friendInteractionMethods.ByName("ApproveFriend")),
			connect.WithClientOptions(opts...),
		),
		rejectFriend: connect.NewClient[v1.RejectFriendRequest, v1.RejectFriendResponse](
			httpClient,
			baseURL+FriendInteractionRejectFriendProcedure,
			connect.WithSchema(friendInteractionMethods.ByName("RejectFriend")),
			connect.WithClientOptions(opts...),
		),
		removeFriend: connect.NewClient[v1.RemoveFriendRequest, v1.RemoveFriendResponse](
			httpClient,
			baseURL+FriendInteractionRemoveFriendProcedure,
			connect.WithSchema(friendInteractionMethods.ByName("RemoveFriend")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+FriendInteractionSendMessageProcedure,
			connect.WithSchema(friendInteractionMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
		reply: connect.NewClient[v1.ReplyRequest, v1.ReplyResponse](
			httpClient,
			baseURL+FriendInteractionReplyProcedure,
			connect.WithSchema(friendInteractionMethods.ByName("Reply")),
			connect.WithClientOptions(opts...),
		),
		jump: connect.NewClient[v1.JumpRequest, v1.JumpResponse](
			httpClient,
			baseURL+FriendInteractionJumpProcedure,
			connect.WithSchema(friendInteractionMethods.ByName("Jump")),
			connect.WithClientOptions(opts...),
		),
	}
}

// friendInteractionClient implements FriendInteractionClient.
type friendInteractionClient struct {
	inviteFriend  *connect.Client[v1.InviteFriendRequest, v1.InviteFriendResponse]
	approveFriend *connect.Client[v1.ApproveFriendRequest, v1.ApproveFriendResponse]
	rejectFriend  *connect.Client[v1.RejectFriendRequest, v1.RejectFriendResponse]
	removeFriend  *connect.Client[v1.RemoveFriendRequest, v1.RemoveFriendResponse]
	sendMessage   *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	reply         *connect.Client[v1.ReplyRequest, v1.ReplyResponse]
	jump          *connect.Client[v1.JumpRequest, v1.JumpResponse]
}

// InviteFriend calls mcsports.friend.v1.FriendInteraction.InviteFriend.
func (c *friendInteractionClient) InviteFriend(ctx context.Context, req *connect.Request[v1.InviteFriendRequest]) (*connect.Response[v1.InviteFriendResponse], error) {
	return c.inviteFriend.CallUnary(ctx, req)
}

// ApproveFriend calls mcsports.friend.v1.FriendInteraction.ApproveFriend.
func (c *friendInteractionClient) ApproveFriend(ctx context.Context, req *connect.Request[v1.ApproveFriendRequest]) (*connect.Response[v1.ApproveFriendResponse], error) {
	return c.approveFriend.CallUnary(ctx, req)
}

// RejectFriend calls mcsports.friend.v1.FriendInteraction.RejectFriend.
func (c *friendInteractionClient) RejectFriend(ctx context.Context, req *connect.Request[v1.RejectFriendRequest]) (*connect.Response[v1.RejectFriendResponse], error) {
	return c.rejectFriend.CallUnary(ctx, req)
}

// RemoveFriend calls mcsports.friend.v1.FriendInteraction.RemoveFriend.
func (c *friendInteractionClient) RemoveFriend(ctx context.Context, req *connect.Request[v1.RemoveFriendRequest]) (*connect.Response[v1.RemoveFriendResponse], error) {
	return c.removeFriend.CallUnary(ctx, req)
}

// SendMessage calls mcsports.friend.v1.FriendInteraction.SendMessage.
func (c *friendInteractionClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// Reply calls mcsports.friend.v1.FriendInteraction.Reply.
func (c *friendInteractionClient) Reply(ctx context.Context, req *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error) {
	return c.reply.CallUnary(ctx, req)
}

// Jump calls mcsports.friend.v1.FriendInteraction.Jump.
func (c *friendInteractionClient) Jump(ctx context.Context, req *connect.Request[v1.JumpRequest]) (*connect.Response[v1.JumpResponse], error) {
	return c.jump.CallUnary(ctx, req)
}

// FriendInteractionHandler is an implementation of the mcsports.friend.v1.FriendInteraction
// service.
type FriendInteractionHandler interface {
	InviteFriend(context.Context, *connect.Request[v1.InviteFriendRequest]) (*connect.Response[v1.InviteFriendResponse], error)
	ApproveFriend(context.Context, *connect.Request[v1.ApproveFriendRequest]) (*connect.Response[v1.ApproveFriendResponse], error)
	RejectFriend(context.Context, *connect.Request[v1.RejectFriendRequest]) (*connect.Response[v1.RejectFriendResponse], error)
	RemoveFriend(context.Context, *connect.Request[v1.RemoveFriendRequest]) (*connect.Response[v1.RemoveFriendResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	Reply(context.Context, *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error)
	Jump(context.Context, *connect.Request[v1.JumpRequest]) (*connect.Response[v1.JumpResponse], error)
}

// NewFriendInteractionHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFriendInteractionHandler(svc FriendInteractionHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	friendInteractionMethods := v1.File_mcsports_friend_v1_interaction_proto.Services().ByName("FriendInteraction").Methods()
	friendInteractionInviteFriendHandler := connect.NewUnaryHandler(
		FriendInteractionInviteFriendProcedure,
		svc.InviteFriend,
		connect.WithSchema(friendInteractionMethods.ByName("InviteFriend")),
		connect.WithHandlerOptions(opts...),
	)
	friendInteractionApproveFriendHandler := connect.NewUnaryHandler(
		FriendInteractionApproveFriendProcedure,
		svc.ApproveFriend,
		connect.WithSchema(friendInteractionMethods.ByName("ApproveFriend")),
		connect.WithHandlerOptions(opts...),
	)
	friendInteractionRejectFriendHandler := connect.NewUnaryHandler(
		FriendInteractionRejectFriendProcedure,
		svc.RejectFriend,
		connect.WithSchema(friendInteractionMethods.ByName("RejectFriend")),
		connect.WithHandlerOptions(opts...),
	)
	friendInteractionRemoveFriendHandler := connect.NewUnaryHandler(
		FriendInteractionRemoveFriendProcedure,
		svc.RemoveFriend,
		connect.WithSchema(friendInteractionMethods.ByName("RemoveFriend")),
		connect.WithHandlerOptions(opts...),
	)
	friendInteractionSendMessageHandler := connect.NewUnaryHandler(
		FriendInteractionSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(friendInteractionMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	friendInteractionReplyHandler := connect.NewUnaryHandler(
		FriendInteractionReplyProcedure,
		svc.Reply,
		connect.WithSchema(friendInteractionMethods.ByName("Reply")),
		connect.WithHandlerOptions(opts...),
	)
	friendInteractionJumpHandler := connect.NewUnaryHandler(
		FriendInteractionJumpProcedure,
		svc.Jump,
		connect.WithSchema(friendInteractionMethods.ByName("Jump")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mcsports.friend.v1.FriendInteraction/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FriendInteractionInviteFriendProcedure:
			friendInteractionInviteFriendHandler.ServeHTTP(w, r)
		case FriendInteractionApproveFriendProcedure:
			friendInteractionApproveFriendHandler.ServeHTTP(w, r)
		case FriendInteractionRejectFriendProcedure:
			friendInteractionRejectFriendHandler.ServeHTTP(w, r)
		case FriendInteractionRemoveFriendProcedure:
			friendInteractionRemoveFriendHandler.ServeHTTP(w, r)
		case FriendInteractionSendMessageProcedure:
			friendInteractionSendMessageHandler.ServeHTTP(w, r)
		case FriendInteractionReplyProcedure:
			friendInteractionReplyHandler.ServeHTTP(w, r)
		case FriendInteractionJumpProcedure:
			friendInteractionJumpHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFriendInteractionHandler returns CodeUnimplemented from all methods.
type UnimplementedFriendInteractionHandler struct{}

func (UnimplementedFriendInteractionHandler) InviteFriend(context.Context, *connect.Request[v1.InviteFriendRequest]) (*connect.Response[v1.InviteFriendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendInteraction.InviteFriend is not implemented"))
}

func (UnimplementedFriendInteractionHandler) ApproveFriend(context.Context, *connect.Request[v1.ApproveFriendRequest]) (*connect.Response[v1.ApproveFriendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendInteraction.ApproveFriend is not implemented"))
}

func (UnimplementedFriendInteractionHandler) RejectFriend(context.Context, *connect.Request[v1.RejectFriendRequest]) (*connect.Response[v1.RejectFriendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendInteraction.RejectFriend is not implemented"))
}

func (UnimplementedFriendInteractionHandler) RemoveFriend(context.Context, *connect.Request[v1.RemoveFriendRequest]) (*connect.Response[v1.RemoveFriendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendInteraction.RemoveFriend is not implemented"))
}

func (UnimplementedFriendInteractionHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendInteraction.SendMessage is not implemented"))
}

func (UnimplementedFriendInteractionHandler) Reply(context.Context, *connect.Request[v1.ReplyRequest]) (*connect.Response[v1.ReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendInteraction.Reply is not implemented"))
}

func (UnimplementedFriendInteractionHandler) Jump(context.Context, *connect.Request[v1.JumpRequest]) (*connect.Response[v1.JumpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.friend.v1.FriendInteraction.Jump is not implemented"))
}
