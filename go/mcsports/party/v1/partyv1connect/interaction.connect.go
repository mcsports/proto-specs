// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mcsports/party/v1/interaction.proto

package partyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/mcsports/party/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PartyInteractionName is the fully-qualified name of the PartyInteraction service.
	PartyInteractionName = "mcsports.party.v1.PartyInteraction"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PartyInteractionCreatePartyProcedure is the fully-qualified name of the PartyInteraction's
	// CreateParty RPC.
	PartyInteractionCreatePartyProcedure = "/mcsports.party.v1.PartyInteraction/CreateParty"
	// PartyInteractionDeletePartyProcedure is the fully-qualified name of the PartyInteraction's
	// DeleteParty RPC.
	PartyInteractionDeletePartyProcedure = "/mcsports.party.v1.PartyInteraction/DeleteParty"
	// PartyInteractionInvitePlayerProcedure is the fully-qualified name of the PartyInteraction's
	// InvitePlayer RPC.
	PartyInteractionInvitePlayerProcedure = "/mcsports.party.v1.PartyInteraction/InvitePlayer"
	// PartyInteractionHandleInviteProcedure is the fully-qualified name of the PartyInteraction's
	// HandleInvite RPC.
	PartyInteractionHandleInviteProcedure = "/mcsports.party.v1.PartyInteraction/HandleInvite"
	// PartyInteractionLeavePartyProcedure is the fully-qualified name of the PartyInteraction's
	// LeaveParty RPC.
	PartyInteractionLeavePartyProcedure = "/mcsports.party.v1.PartyInteraction/LeaveParty"
	// PartyInteractionPromoteMemberProcedure is the fully-qualified name of the PartyInteraction's
	// PromoteMember RPC.
	PartyInteractionPromoteMemberProcedure = "/mcsports.party.v1.PartyInteraction/PromoteMember"
	// PartyInteractionDemoteMemberProcedure is the fully-qualified name of the PartyInteraction's
	// DemoteMember RPC.
	PartyInteractionDemoteMemberProcedure = "/mcsports.party.v1.PartyInteraction/DemoteMember"
	// PartyInteractionChatProcedure is the fully-qualified name of the PartyInteraction's Chat RPC.
	PartyInteractionChatProcedure = "/mcsports.party.v1.PartyInteraction/Chat"
	// PartyInteractionKickMemberProcedure is the fully-qualified name of the PartyInteraction's
	// KickMember RPC.
	PartyInteractionKickMemberProcedure = "/mcsports.party.v1.PartyInteraction/KickMember"
	// PartyInteractionJoinPartyProcedure is the fully-qualified name of the PartyInteraction's
	// JoinParty RPC.
	PartyInteractionJoinPartyProcedure = "/mcsports.party.v1.PartyInteraction/JoinParty"
)

// PartyInteractionClient is a client for the mcsports.party.v1.PartyInteraction service.
type PartyInteractionClient interface {
	CreateParty(context.Context, *connect.Request[v1.CreatePartyRequest]) (*connect.Response[v1.CreatePartyResponse], error)
	DeleteParty(context.Context, *connect.Request[v1.DeletePartyRequest]) (*connect.Response[v1.DeletePartyResponse], error)
	InvitePlayer(context.Context, *connect.Request[v1.InvitePlayerRequest]) (*connect.Response[v1.InvitePlayerResponse], error)
	HandleInvite(context.Context, *connect.Request[v1.HandleInviteRequest]) (*connect.Response[v1.HandleInviteResponse], error)
	LeaveParty(context.Context, *connect.Request[v1.LeavePartyRequest]) (*connect.Response[v1.LeavePartyResponse], error)
	PromoteMember(context.Context, *connect.Request[v1.PromoteMemberRequest]) (*connect.Response[v1.PromoteMemberResponse], error)
	DemoteMember(context.Context, *connect.Request[v1.DemoteMemberRequest]) (*connect.Response[v1.DemoteMemberResponse], error)
	Chat(context.Context, *connect.Request[v1.ChatRequest]) (*connect.Response[v1.ChatResponse], error)
	KickMember(context.Context, *connect.Request[v1.KickMemberRequest]) (*connect.Response[v1.KickMemberResponse], error)
	JoinParty(context.Context, *connect.Request[v1.JoinPartyRequest]) (*connect.Response[v1.JoinPartyResponse], error)
}

// NewPartyInteractionClient constructs a client for the mcsports.party.v1.PartyInteraction service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPartyInteractionClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PartyInteractionClient {
	baseURL = strings.TrimRight(baseURL, "/")
	partyInteractionMethods := v1.File_mcsports_party_v1_interaction_proto.Services().ByName("PartyInteraction").Methods()
	return &partyInteractionClient{
		createParty: connect.NewClient[v1.CreatePartyRequest, v1.CreatePartyResponse](
			httpClient,
			baseURL+PartyInteractionCreatePartyProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("CreateParty")),
			connect.WithClientOptions(opts...),
		),
		deleteParty: connect.NewClient[v1.DeletePartyRequest, v1.DeletePartyResponse](
			httpClient,
			baseURL+PartyInteractionDeletePartyProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("DeleteParty")),
			connect.WithClientOptions(opts...),
		),
		invitePlayer: connect.NewClient[v1.InvitePlayerRequest, v1.InvitePlayerResponse](
			httpClient,
			baseURL+PartyInteractionInvitePlayerProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("InvitePlayer")),
			connect.WithClientOptions(opts...),
		),
		handleInvite: connect.NewClient[v1.HandleInviteRequest, v1.HandleInviteResponse](
			httpClient,
			baseURL+PartyInteractionHandleInviteProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("HandleInvite")),
			connect.WithClientOptions(opts...),
		),
		leaveParty: connect.NewClient[v1.LeavePartyRequest, v1.LeavePartyResponse](
			httpClient,
			baseURL+PartyInteractionLeavePartyProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("LeaveParty")),
			connect.WithClientOptions(opts...),
		),
		promoteMember: connect.NewClient[v1.PromoteMemberRequest, v1.PromoteMemberResponse](
			httpClient,
			baseURL+PartyInteractionPromoteMemberProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("PromoteMember")),
			connect.WithClientOptions(opts...),
		),
		demoteMember: connect.NewClient[v1.DemoteMemberRequest, v1.DemoteMemberResponse](
			httpClient,
			baseURL+PartyInteractionDemoteMemberProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("DemoteMember")),
			connect.WithClientOptions(opts...),
		),
		chat: connect.NewClient[v1.ChatRequest, v1.ChatResponse](
			httpClient,
			baseURL+PartyInteractionChatProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("Chat")),
			connect.WithClientOptions(opts...),
		),
		kickMember: connect.NewClient[v1.KickMemberRequest, v1.KickMemberResponse](
			httpClient,
			baseURL+PartyInteractionKickMemberProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("KickMember")),
			connect.WithClientOptions(opts...),
		),
		joinParty: connect.NewClient[v1.JoinPartyRequest, v1.JoinPartyResponse](
			httpClient,
			baseURL+PartyInteractionJoinPartyProcedure,
			connect.WithSchema(partyInteractionMethods.ByName("JoinParty")),
			connect.WithClientOptions(opts...),
		),
	}
}

// partyInteractionClient implements PartyInteractionClient.
type partyInteractionClient struct {
	createParty   *connect.Client[v1.CreatePartyRequest, v1.CreatePartyResponse]
	deleteParty   *connect.Client[v1.DeletePartyRequest, v1.DeletePartyResponse]
	invitePlayer  *connect.Client[v1.InvitePlayerRequest, v1.InvitePlayerResponse]
	handleInvite  *connect.Client[v1.HandleInviteRequest, v1.HandleInviteResponse]
	leaveParty    *connect.Client[v1.LeavePartyRequest, v1.LeavePartyResponse]
	promoteMember *connect.Client[v1.PromoteMemberRequest, v1.PromoteMemberResponse]
	demoteMember  *connect.Client[v1.DemoteMemberRequest, v1.DemoteMemberResponse]
	chat          *connect.Client[v1.ChatRequest, v1.ChatResponse]
	kickMember    *connect.Client[v1.KickMemberRequest, v1.KickMemberResponse]
	joinParty     *connect.Client[v1.JoinPartyRequest, v1.JoinPartyResponse]
}

// CreateParty calls mcsports.party.v1.PartyInteraction.CreateParty.
func (c *partyInteractionClient) CreateParty(ctx context.Context, req *connect.Request[v1.CreatePartyRequest]) (*connect.Response[v1.CreatePartyResponse], error) {
	return c.createParty.CallUnary(ctx, req)
}

// DeleteParty calls mcsports.party.v1.PartyInteraction.DeleteParty.
func (c *partyInteractionClient) DeleteParty(ctx context.Context, req *connect.Request[v1.DeletePartyRequest]) (*connect.Response[v1.DeletePartyResponse], error) {
	return c.deleteParty.CallUnary(ctx, req)
}

// InvitePlayer calls mcsports.party.v1.PartyInteraction.InvitePlayer.
func (c *partyInteractionClient) InvitePlayer(ctx context.Context, req *connect.Request[v1.InvitePlayerRequest]) (*connect.Response[v1.InvitePlayerResponse], error) {
	return c.invitePlayer.CallUnary(ctx, req)
}

// HandleInvite calls mcsports.party.v1.PartyInteraction.HandleInvite.
func (c *partyInteractionClient) HandleInvite(ctx context.Context, req *connect.Request[v1.HandleInviteRequest]) (*connect.Response[v1.HandleInviteResponse], error) {
	return c.handleInvite.CallUnary(ctx, req)
}

// LeaveParty calls mcsports.party.v1.PartyInteraction.LeaveParty.
func (c *partyInteractionClient) LeaveParty(ctx context.Context, req *connect.Request[v1.LeavePartyRequest]) (*connect.Response[v1.LeavePartyResponse], error) {
	return c.leaveParty.CallUnary(ctx, req)
}

// PromoteMember calls mcsports.party.v1.PartyInteraction.PromoteMember.
func (c *partyInteractionClient) PromoteMember(ctx context.Context, req *connect.Request[v1.PromoteMemberRequest]) (*connect.Response[v1.PromoteMemberResponse], error) {
	return c.promoteMember.CallUnary(ctx, req)
}

// DemoteMember calls mcsports.party.v1.PartyInteraction.DemoteMember.
func (c *partyInteractionClient) DemoteMember(ctx context.Context, req *connect.Request[v1.DemoteMemberRequest]) (*connect.Response[v1.DemoteMemberResponse], error) {
	return c.demoteMember.CallUnary(ctx, req)
}

// Chat calls mcsports.party.v1.PartyInteraction.Chat.
func (c *partyInteractionClient) Chat(ctx context.Context, req *connect.Request[v1.ChatRequest]) (*connect.Response[v1.ChatResponse], error) {
	return c.chat.CallUnary(ctx, req)
}

// KickMember calls mcsports.party.v1.PartyInteraction.KickMember.
func (c *partyInteractionClient) KickMember(ctx context.Context, req *connect.Request[v1.KickMemberRequest]) (*connect.Response[v1.KickMemberResponse], error) {
	return c.kickMember.CallUnary(ctx, req)
}

// JoinParty calls mcsports.party.v1.PartyInteraction.JoinParty.
func (c *partyInteractionClient) JoinParty(ctx context.Context, req *connect.Request[v1.JoinPartyRequest]) (*connect.Response[v1.JoinPartyResponse], error) {
	return c.joinParty.CallUnary(ctx, req)
}

// PartyInteractionHandler is an implementation of the mcsports.party.v1.PartyInteraction service.
type PartyInteractionHandler interface {
	CreateParty(context.Context, *connect.Request[v1.CreatePartyRequest]) (*connect.Response[v1.CreatePartyResponse], error)
	DeleteParty(context.Context, *connect.Request[v1.DeletePartyRequest]) (*connect.Response[v1.DeletePartyResponse], error)
	InvitePlayer(context.Context, *connect.Request[v1.InvitePlayerRequest]) (*connect.Response[v1.InvitePlayerResponse], error)
	HandleInvite(context.Context, *connect.Request[v1.HandleInviteRequest]) (*connect.Response[v1.HandleInviteResponse], error)
	LeaveParty(context.Context, *connect.Request[v1.LeavePartyRequest]) (*connect.Response[v1.LeavePartyResponse], error)
	PromoteMember(context.Context, *connect.Request[v1.PromoteMemberRequest]) (*connect.Response[v1.PromoteMemberResponse], error)
	DemoteMember(context.Context, *connect.Request[v1.DemoteMemberRequest]) (*connect.Response[v1.DemoteMemberResponse], error)
	Chat(context.Context, *connect.Request[v1.ChatRequest]) (*connect.Response[v1.ChatResponse], error)
	KickMember(context.Context, *connect.Request[v1.KickMemberRequest]) (*connect.Response[v1.KickMemberResponse], error)
	JoinParty(context.Context, *connect.Request[v1.JoinPartyRequest]) (*connect.Response[v1.JoinPartyResponse], error)
}

// NewPartyInteractionHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPartyInteractionHandler(svc PartyInteractionHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	partyInteractionMethods := v1.File_mcsports_party_v1_interaction_proto.Services().ByName("PartyInteraction").Methods()
	partyInteractionCreatePartyHandler := connect.NewUnaryHandler(
		PartyInteractionCreatePartyProcedure,
		svc.CreateParty,
		connect.WithSchema(partyInteractionMethods.ByName("CreateParty")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionDeletePartyHandler := connect.NewUnaryHandler(
		PartyInteractionDeletePartyProcedure,
		svc.DeleteParty,
		connect.WithSchema(partyInteractionMethods.ByName("DeleteParty")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionInvitePlayerHandler := connect.NewUnaryHandler(
		PartyInteractionInvitePlayerProcedure,
		svc.InvitePlayer,
		connect.WithSchema(partyInteractionMethods.ByName("InvitePlayer")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionHandleInviteHandler := connect.NewUnaryHandler(
		PartyInteractionHandleInviteProcedure,
		svc.HandleInvite,
		connect.WithSchema(partyInteractionMethods.ByName("HandleInvite")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionLeavePartyHandler := connect.NewUnaryHandler(
		PartyInteractionLeavePartyProcedure,
		svc.LeaveParty,
		connect.WithSchema(partyInteractionMethods.ByName("LeaveParty")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionPromoteMemberHandler := connect.NewUnaryHandler(
		PartyInteractionPromoteMemberProcedure,
		svc.PromoteMember,
		connect.WithSchema(partyInteractionMethods.ByName("PromoteMember")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionDemoteMemberHandler := connect.NewUnaryHandler(
		PartyInteractionDemoteMemberProcedure,
		svc.DemoteMember,
		connect.WithSchema(partyInteractionMethods.ByName("DemoteMember")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionChatHandler := connect.NewUnaryHandler(
		PartyInteractionChatProcedure,
		svc.Chat,
		connect.WithSchema(partyInteractionMethods.ByName("Chat")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionKickMemberHandler := connect.NewUnaryHandler(
		PartyInteractionKickMemberProcedure,
		svc.KickMember,
		connect.WithSchema(partyInteractionMethods.ByName("KickMember")),
		connect.WithHandlerOptions(opts...),
	)
	partyInteractionJoinPartyHandler := connect.NewUnaryHandler(
		PartyInteractionJoinPartyProcedure,
		svc.JoinParty,
		connect.WithSchema(partyInteractionMethods.ByName("JoinParty")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mcsports.party.v1.PartyInteraction/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PartyInteractionCreatePartyProcedure:
			partyInteractionCreatePartyHandler.ServeHTTP(w, r)
		case PartyInteractionDeletePartyProcedure:
			partyInteractionDeletePartyHandler.ServeHTTP(w, r)
		case PartyInteractionInvitePlayerProcedure:
			partyInteractionInvitePlayerHandler.ServeHTTP(w, r)
		case PartyInteractionHandleInviteProcedure:
			partyInteractionHandleInviteHandler.ServeHTTP(w, r)
		case PartyInteractionLeavePartyProcedure:
			partyInteractionLeavePartyHandler.ServeHTTP(w, r)
		case PartyInteractionPromoteMemberProcedure:
			partyInteractionPromoteMemberHandler.ServeHTTP(w, r)
		case PartyInteractionDemoteMemberProcedure:
			partyInteractionDemoteMemberHandler.ServeHTTP(w, r)
		case PartyInteractionChatProcedure:
			partyInteractionChatHandler.ServeHTTP(w, r)
		case PartyInteractionKickMemberProcedure:
			partyInteractionKickMemberHandler.ServeHTTP(w, r)
		case PartyInteractionJoinPartyProcedure:
			partyInteractionJoinPartyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPartyInteractionHandler returns CodeUnimplemented from all methods.
type UnimplementedPartyInteractionHandler struct{}

func (UnimplementedPartyInteractionHandler) CreateParty(context.Context, *connect.Request[v1.CreatePartyRequest]) (*connect.Response[v1.CreatePartyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.CreateParty is not implemented"))
}

func (UnimplementedPartyInteractionHandler) DeleteParty(context.Context, *connect.Request[v1.DeletePartyRequest]) (*connect.Response[v1.DeletePartyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.DeleteParty is not implemented"))
}

func (UnimplementedPartyInteractionHandler) InvitePlayer(context.Context, *connect.Request[v1.InvitePlayerRequest]) (*connect.Response[v1.InvitePlayerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.InvitePlayer is not implemented"))
}

func (UnimplementedPartyInteractionHandler) HandleInvite(context.Context, *connect.Request[v1.HandleInviteRequest]) (*connect.Response[v1.HandleInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.HandleInvite is not implemented"))
}

func (UnimplementedPartyInteractionHandler) LeaveParty(context.Context, *connect.Request[v1.LeavePartyRequest]) (*connect.Response[v1.LeavePartyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.LeaveParty is not implemented"))
}

func (UnimplementedPartyInteractionHandler) PromoteMember(context.Context, *connect.Request[v1.PromoteMemberRequest]) (*connect.Response[v1.PromoteMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.PromoteMember is not implemented"))
}

func (UnimplementedPartyInteractionHandler) DemoteMember(context.Context, *connect.Request[v1.DemoteMemberRequest]) (*connect.Response[v1.DemoteMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.DemoteMember is not implemented"))
}

func (UnimplementedPartyInteractionHandler) Chat(context.Context, *connect.Request[v1.ChatRequest]) (*connect.Response[v1.ChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.Chat is not implemented"))
}

func (UnimplementedPartyInteractionHandler) KickMember(context.Context, *connect.Request[v1.KickMemberRequest]) (*connect.Response[v1.KickMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.KickMember is not implemented"))
}

func (UnimplementedPartyInteractionHandler) JoinParty(context.Context, *connect.Request[v1.JoinPartyRequest]) (*connect.Response[v1.JoinPartyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyInteraction.JoinParty is not implemented"))
}
