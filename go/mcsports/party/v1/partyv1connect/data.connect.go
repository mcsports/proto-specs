// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mcsports/party/v1/data.proto

package partyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/mcsports/party/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PartyDataName is the fully-qualified name of the PartyData service.
	PartyDataName = "mcsports.party.v1.PartyData"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PartyDataGetPartyProcedure is the fully-qualified name of the PartyData's GetParty RPC.
	PartyDataGetPartyProcedure = "/mcsports.party.v1.PartyData/GetParty"
	// PartyDataGetMemberPartyProcedure is the fully-qualified name of the PartyData's GetMemberParty
	// RPC.
	PartyDataGetMemberPartyProcedure = "/mcsports.party.v1.PartyData/GetMemberParty"
	// PartyDataGetMemberRoleProcedure is the fully-qualified name of the PartyData's GetMemberRole RPC.
	PartyDataGetMemberRoleProcedure = "/mcsports.party.v1.PartyData/GetMemberRole"
)

// PartyDataClient is a client for the mcsports.party.v1.PartyData service.
type PartyDataClient interface {
	GetParty(context.Context, *connect.Request[v1.PartyRequest]) (*connect.Response[v1.PartyResponse], error)
	GetMemberParty(context.Context, *connect.Request[v1.MemberPartyRequest]) (*connect.Response[v1.MemberPartyResponse], error)
	GetMemberRole(context.Context, *connect.Request[v1.MemberRoleRequest]) (*connect.Response[v1.MemberRoleResponse], error)
}

// NewPartyDataClient constructs a client for the mcsports.party.v1.PartyData service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPartyDataClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PartyDataClient {
	baseURL = strings.TrimRight(baseURL, "/")
	partyDataMethods := v1.File_mcsports_party_v1_data_proto.Services().ByName("PartyData").Methods()
	return &partyDataClient{
		getParty: connect.NewClient[v1.PartyRequest, v1.PartyResponse](
			httpClient,
			baseURL+PartyDataGetPartyProcedure,
			connect.WithSchema(partyDataMethods.ByName("GetParty")),
			connect.WithClientOptions(opts...),
		),
		getMemberParty: connect.NewClient[v1.MemberPartyRequest, v1.MemberPartyResponse](
			httpClient,
			baseURL+PartyDataGetMemberPartyProcedure,
			connect.WithSchema(partyDataMethods.ByName("GetMemberParty")),
			connect.WithClientOptions(opts...),
		),
		getMemberRole: connect.NewClient[v1.MemberRoleRequest, v1.MemberRoleResponse](
			httpClient,
			baseURL+PartyDataGetMemberRoleProcedure,
			connect.WithSchema(partyDataMethods.ByName("GetMemberRole")),
			connect.WithClientOptions(opts...),
		),
	}
}

// partyDataClient implements PartyDataClient.
type partyDataClient struct {
	getParty       *connect.Client[v1.PartyRequest, v1.PartyResponse]
	getMemberParty *connect.Client[v1.MemberPartyRequest, v1.MemberPartyResponse]
	getMemberRole  *connect.Client[v1.MemberRoleRequest, v1.MemberRoleResponse]
}

// GetParty calls mcsports.party.v1.PartyData.GetParty.
func (c *partyDataClient) GetParty(ctx context.Context, req *connect.Request[v1.PartyRequest]) (*connect.Response[v1.PartyResponse], error) {
	return c.getParty.CallUnary(ctx, req)
}

// GetMemberParty calls mcsports.party.v1.PartyData.GetMemberParty.
func (c *partyDataClient) GetMemberParty(ctx context.Context, req *connect.Request[v1.MemberPartyRequest]) (*connect.Response[v1.MemberPartyResponse], error) {
	return c.getMemberParty.CallUnary(ctx, req)
}

// GetMemberRole calls mcsports.party.v1.PartyData.GetMemberRole.
func (c *partyDataClient) GetMemberRole(ctx context.Context, req *connect.Request[v1.MemberRoleRequest]) (*connect.Response[v1.MemberRoleResponse], error) {
	return c.getMemberRole.CallUnary(ctx, req)
}

// PartyDataHandler is an implementation of the mcsports.party.v1.PartyData service.
type PartyDataHandler interface {
	GetParty(context.Context, *connect.Request[v1.PartyRequest]) (*connect.Response[v1.PartyResponse], error)
	GetMemberParty(context.Context, *connect.Request[v1.MemberPartyRequest]) (*connect.Response[v1.MemberPartyResponse], error)
	GetMemberRole(context.Context, *connect.Request[v1.MemberRoleRequest]) (*connect.Response[v1.MemberRoleResponse], error)
}

// NewPartyDataHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPartyDataHandler(svc PartyDataHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	partyDataMethods := v1.File_mcsports_party_v1_data_proto.Services().ByName("PartyData").Methods()
	partyDataGetPartyHandler := connect.NewUnaryHandler(
		PartyDataGetPartyProcedure,
		svc.GetParty,
		connect.WithSchema(partyDataMethods.ByName("GetParty")),
		connect.WithHandlerOptions(opts...),
	)
	partyDataGetMemberPartyHandler := connect.NewUnaryHandler(
		PartyDataGetMemberPartyProcedure,
		svc.GetMemberParty,
		connect.WithSchema(partyDataMethods.ByName("GetMemberParty")),
		connect.WithHandlerOptions(opts...),
	)
	partyDataGetMemberRoleHandler := connect.NewUnaryHandler(
		PartyDataGetMemberRoleProcedure,
		svc.GetMemberRole,
		connect.WithSchema(partyDataMethods.ByName("GetMemberRole")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mcsports.party.v1.PartyData/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PartyDataGetPartyProcedure:
			partyDataGetPartyHandler.ServeHTTP(w, r)
		case PartyDataGetMemberPartyProcedure:
			partyDataGetMemberPartyHandler.ServeHTTP(w, r)
		case PartyDataGetMemberRoleProcedure:
			partyDataGetMemberRoleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPartyDataHandler returns CodeUnimplemented from all methods.
type UnimplementedPartyDataHandler struct{}

func (UnimplementedPartyDataHandler) GetParty(context.Context, *connect.Request[v1.PartyRequest]) (*connect.Response[v1.PartyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyData.GetParty is not implemented"))
}

func (UnimplementedPartyDataHandler) GetMemberParty(context.Context, *connect.Request[v1.MemberPartyRequest]) (*connect.Response[v1.MemberPartyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyData.GetMemberParty is not implemented"))
}

func (UnimplementedPartyDataHandler) GetMemberRole(context.Context, *connect.Request[v1.MemberRoleRequest]) (*connect.Response[v1.MemberRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mcsports.party.v1.PartyData.GetMemberRole is not implemented"))
}
